{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ABI, ADDRESS } from \"./globals\";\nimport Web3 from \"web3\"; // Fetching WEB3 Provider\n\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!window.ethereum) {\n              _context.next = 7;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 5;\n            return window.ethereum.enable();\n\n          case 5:\n            _context.next = 8;\n            break;\n\n          case 7:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n            }\n\n          case 8:\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            window.alert(\"Trouble connecting to you web3 browser...\");\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function loadWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/utils/utility.js"],"names":["ABI","ADDRESS","Web3","loadWeb3","window","ethereum","web3","enable","currentProvider","alert"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,WAA7B;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AAEA,OAAO,IAAMC,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEhBC,MAAM,CAACC,QAFS;AAAA;AAAA;AAAA;;AAGlBD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIJ,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAd;AAHkB;AAAA,mBAIZD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,EAJY;;AAAA;AAAA;AAAA;;AAAA;AAKb,gBAAIH,MAAM,CAACE,IAAX,EAAiB;AACtBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIJ,IAAJ,CAASE,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACD,aAFM,MAEA;AACLJ,cAAAA,MAAM,CAACK,KAAP,CACE,qEADF;AAGD;;AAXmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAapBL,YAAAA,MAAM,CAACK,KAAP,CAAa,2CAAb;;AAboB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARN,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import { ABI, ADDRESS } from \"./globals\";\r\nimport Web3 from \"web3\";\r\n\r\n// Fetching WEB3 Provider\r\n\r\nexport const loadWeb3 = async () => {\r\n  try {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  } catch (err) {\r\n    window.alert(\"Trouble connecting to you web3 browser...\");\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}