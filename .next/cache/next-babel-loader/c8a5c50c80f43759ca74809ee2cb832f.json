{"ast":null,"code":"import { ABI, ADDRESS } from \"./globals\"; // Fetching WEB3 Provider\n\nexport const loadWeb3 = async () => {\n  try {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  } catch (err) {\n    window.alert(\"Trouble connecting to you web3 browser...\");\n  }\n}; // General loading from the blockchain and instantiating the contract\n\nexport const loadBlockchainData = async () => {\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n  this.setState({\n    account: this.context.account\n  });\n  const contract = new web3.eth.Contract(ABI, ADDRESS);\n  this.setState({\n    contract\n  });\n  const isExists = await contract.methods.isUserExists(this.state.account).call();\n  this.setState({\n    isExist: isExists\n  });\n};","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/utils/utility.js"],"names":["ABI","ADDRESS","loadWeb3","window","ethereum","web3","Web3","enable","currentProvider","alert","err","loadBlockchainData","givenProvider","setState","account","context","contract","eth","Contract","isExists","methods","isUserExists","state","call","isExist"],"mappings":"AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,WAA7B,C,CAEA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAClC,MAAI;AACF,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBG,MAAhB,EAAN;AACD,KAHD,MAGO,IAAIJ,MAAM,CAACE,IAAX,EAAiB;AACtBF,MAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACE,IAAP,CAAYG,eAArB,CAAd;AACD,KAFM,MAEA;AACLL,MAAAA,MAAM,CAACM,KAAP,CACE,qEADF;AAGD;AACF,GAXD,CAWE,OAAOC,GAAP,EAAY;AACZP,IAAAA,MAAM,CAACM,KAAP,CAAa,2CAAb;AACD;AACF,CAfM,C,CAiBP;;AAEA,OAAO,MAAME,kBAAkB,GAAG,YAAY;AAC5C,QAAMN,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACM,aAAL,IAAsB,uBAA/B,CAAb;AACA,OAAKC,QAAL,CAAc;AAAEC,IAAAA,OAAO,EAAE,KAAKC,OAAL,CAAaD;AAAxB,GAAd;AACA,QAAME,QAAQ,GAAG,IAAIX,IAAI,CAACY,GAAL,CAASC,QAAb,CAAsBlB,GAAtB,EAA2BC,OAA3B,CAAjB;AACA,OAAKY,QAAL,CAAc;AAAEG,IAAAA;AAAF,GAAd;AACA,QAAMG,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CACpBC,YADoB,CACP,KAAKC,KAAL,CAAWR,OADJ,EAEpBS,IAFoB,EAAvB;AAGA,OAAKV,QAAL,CAAc;AAAEW,IAAAA,OAAO,EAAEL;AAAX,GAAd;AACD,CATM","sourcesContent":["import { ABI, ADDRESS } from \"./globals\";\r\n\r\n// Fetching WEB3 Provider\r\n\r\nexport const loadWeb3 = async () => {\r\n  try {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  } catch (err) {\r\n    window.alert(\"Trouble connecting to you web3 browser...\");\r\n  }\r\n};\r\n\r\n// General loading from the blockchain and instantiating the contract\r\n\r\nexport const loadBlockchainData = async () => {\r\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n  this.setState({ account: this.context.account });\r\n  const contract = new web3.eth.Contract(ABI, ADDRESS);\r\n  this.setState({ contract });\r\n  const isExists = await contract.methods\r\n    .isUserExists(this.state.account)\r\n    .call();\r\n  this.setState({ isExist: isExists });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}