{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crfab\\\\Desktop\\\\forsage-boilerplate\\\\components\\\\matrix\\\\MatrixSystem.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport X3MatrixHolder from \"./X3MatrixHolder\";\nimport X4MatrixHolder from \"./X4MatrixHolder\";\nimport Web3 from \"web3\";\nimport { ABI, ADDRESS } from \"../../utils/globals\";\nimport { loadWeb3 } from \"../../utils/utility\";\n\nclass MatrixSystem extends Component {\n  async UNSAFE_componentWillMount() {\n    try {\n      this.setState({\n        account: this.props.account\n      });\n      await loadWeb3();\n      await this.loadBlockchainData();\n      test();\n    } catch (err) {\n      window.alert(\"Something went wrong.. Check: \" + err);\n    }\n  }\n\n  async test() {\n    const x3 = [];\n\n    for (let i = 1; i < 13; i++) {\n      const res = await this.state.contract.methods.usersX3Matrix(this.state.account, i).call();\n      x3.push({\n        level: i,\n        userX3: res\n      });\n    }\n  }\n\n  async loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      const contract = new web3.eth.Contract(ABI, ADDRESS);\n      this.setState({\n        contract\n      });\n      const costs = await contract.methods.registrationCost().call();\n      this.setState({\n        cost: costs\n      }); // Matrix Calls for the X3\n\n      const x3 = [];\n\n      for (let i = 1; i < 13; i++) {\n        const res = await contract.methods.usersX3Matrix(this.state.account, i).call();\n        x3.push({\n          level: i,\n          userX3: res\n        });\n      }\n\n      const elementsX3 = [];\n\n      var _cost = this.state.cost / 2;\n\n      for (let i = 0; i < 12; i++) {\n        let j = i + 1;\n        const downlines = x3[i].userX3[1].length;\n        elementsX3.push({\n          id: j,\n          number: downlines,\n          key: j,\n          cost: _cost\n        });\n        _cost = _cost * 2;\n      }\n\n      const x3Exist = [];\n\n      for (let i = 1; i < 13; i++) {\n        const res = await contract.methods.usersActiveX3Levels(this.state.account, i).call();\n        x3Exist.push({\n          id: i,\n          userX3Exist: res\n        });\n      }\n\n      const x3Payload = this.x3Infos(x3Exist, elementsX3);\n      this.setState({\n        x3Payload\n      }); // Matrix Calls for the X4\n\n      var _x4cost = this.state.cost / 2;\n\n      const x4Exist = [];\n\n      for (let i = 1; i < 13; i++) {\n        const res = await contract.methods.usersActiveX6Levels(this.state.account, i).call();\n        x4Exist.push({\n          id: i,\n          userX4Exist: res,\n          key: i,\n          cost: _x4cost\n        });\n        _x4cost = _x4cost * 2;\n      }\n\n      const x6 = [];\n\n      for (let i = 1; i < 13; i++) {\n        const res = await contract.methods.usersX6Matrix(this.state.account, i).call();\n        x6.push({\n          id: i,\n          userX6: res\n        });\n      }\n\n      const x6Payload = this.x3Infos(x4Exist, x6);\n      this.setState({\n        x6Payload\n      });\n    } catch (err) {\n      window.alert(\"Something went wrong.. Check: \" + err);\n    }\n  } // Merging X3 quereries into 1 Payload\n\n\n  x3Infos(arr1, arr2) {\n    return arr1.map((item, i) => {\n      if (item.id === arr2[i].id) {\n        return Object.assign({}, item, arr2[i]);\n      }\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      parnterCount: \"\",\n      cost: \"\"\n    };\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(X3MatrixHolder, {\n      struc: this.state.x3Payload,\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }), __jsx(X4MatrixHolder, {\n      struc: this.state.x6Payload,\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default MatrixSystem;","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/components/matrix/MatrixSystem.jsx"],"names":["React","Component","X3MatrixHolder","X4MatrixHolder","Web3","ABI","ADDRESS","loadWeb3","MatrixSystem","UNSAFE_componentWillMount","setState","account","props","loadBlockchainData","test","err","window","alert","x3","i","res","state","contract","methods","usersX3Matrix","call","push","level","userX3","web3","givenProvider","eth","Contract","costs","registrationCost","cost","elementsX3","_cost","j","downlines","length","id","number","key","x3Exist","usersActiveX3Levels","userX3Exist","x3Payload","x3Infos","_x4cost","x4Exist","usersActiveX6Levels","userX4Exist","x6","usersX6Matrix","userX6","x6Payload","arr1","arr2","map","item","Object","assign","constructor","parnterCount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport X3MatrixHolder from \"./X3MatrixHolder\";\r\nimport X4MatrixHolder from \"./X4MatrixHolder\";\r\nimport Web3 from \"web3\";\r\nimport { ABI, ADDRESS } from \"../../utils/globals\";\r\nimport { loadWeb3 } from \"../../utils/utility\";\r\n\r\nclass MatrixSystem extends Component {\r\n  async UNSAFE_componentWillMount() {\r\n    try {\r\n      this.setState({ account: this.props.account });\r\n      await loadWeb3();\r\n\r\n      await this.loadBlockchainData();\r\n      test();\r\n    } catch (err) {\r\n      window.alert(\"Something went wrong.. Check: \" + err);\r\n    }\r\n  }\r\n\r\n  async test() {\r\n    const x3 = [];\r\n    for (let i = 1; i < 13; i++) {\r\n      const res = await this.state.contract.methods\r\n        .usersX3Matrix(this.state.account, i)\r\n        .call();\r\n      x3.push({\r\n        level: i,\r\n        userX3: res,\r\n      });\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    try {\r\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n      const contract = new web3.eth.Contract(ABI, ADDRESS);\r\n      this.setState({ contract });\r\n      const costs = await contract.methods.registrationCost().call();\r\n      this.setState({ cost: costs });\r\n\r\n      // Matrix Calls for the X3\r\n      const x3 = [];\r\n      for (let i = 1; i < 13; i++) {\r\n        const res = await contract.methods\r\n          .usersX3Matrix(this.state.account, i)\r\n          .call();\r\n        x3.push({\r\n          level: i,\r\n          userX3: res,\r\n        });\r\n      }\r\n      const elementsX3 = [];\r\n      var _cost = this.state.cost / 2;\r\n      for (let i = 0; i < 12; i++) {\r\n        let j = i + 1;\r\n\r\n        const downlines = x3[i].userX3[1].length;\r\n        elementsX3.push({\r\n          id: j,\r\n          number: downlines,\r\n          key: j,\r\n          cost: _cost,\r\n        });\r\n        _cost = _cost * 2;\r\n      }\r\n      const x3Exist = [];\r\n      for (let i = 1; i < 13; i++) {\r\n        const res = await contract.methods\r\n          .usersActiveX3Levels(this.state.account, i)\r\n          .call();\r\n        x3Exist.push({\r\n          id: i,\r\n          userX3Exist: res,\r\n        });\r\n      }\r\n      const x3Payload = this.x3Infos(x3Exist, elementsX3);\r\n      this.setState({ x3Payload });\r\n\r\n      // Matrix Calls for the X4\r\n      var _x4cost = this.state.cost / 2;\r\n      const x4Exist = [];\r\n      for (let i = 1; i < 13; i++) {\r\n        const res = await contract.methods\r\n          .usersActiveX6Levels(this.state.account, i)\r\n          .call();\r\n        x4Exist.push({\r\n          id: i,\r\n          userX4Exist: res,\r\n          key: i,\r\n          cost: _x4cost,\r\n        });\r\n        _x4cost = _x4cost * 2;\r\n      }\r\n      const x6 = [];\r\n      for (let i = 1; i < 13; i++) {\r\n        const res = await contract.methods\r\n          .usersX6Matrix(this.state.account, i)\r\n          .call();\r\n        x6.push({\r\n          id: i,\r\n          userX6: res,\r\n        });\r\n      }\r\n\r\n      const x6Payload = this.x3Infos(x4Exist, x6);\r\n      this.setState({ x6Payload });\r\n    } catch (err) {\r\n      window.alert(\"Something went wrong.. Check: \" + err);\r\n    }\r\n  }\r\n\r\n  // Merging X3 quereries into 1 Payload\r\n  x3Infos(arr1, arr2) {\r\n    return arr1.map((item, i) => {\r\n      if (item.id === arr2[i].id) {\r\n        return Object.assign({}, item, arr2[i]);\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      account: \"\",\r\n      parnterCount: \"\",\r\n      cost: \"\",\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <X3MatrixHolder\r\n          struc={this.state.x3Payload}\r\n          account={this.state.account}\r\n        />\r\n        <X4MatrixHolder\r\n          struc={this.state.x6Payload}\r\n          account={this.state.account}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MatrixSystem;\r\n"]},"metadata":{},"sourceType":"module"}