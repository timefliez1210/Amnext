{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\crfab\\\\Desktop\\\\forsage-boilerplate\\\\pages\\\\ref\\\\[id].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useRouter } from \"next/router\";\nimport { useRouter } from \"next/router\";\nimport { useContext } from \"react\";\n\nvar RefLink = function RefLink() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n  console.log(id); // idToAddress\n  // pass Address into Context\n\n  function loadBlockchainData() {\n    return _loadBlockchainData.apply(this, arguments);\n  }\n\n  function _loadBlockchainData() {\n    _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, contract, isExists, costs;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n              _context.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context.sent;\n              this.setState({\n                account: accounts[0]\n              });\n              contract = new web3.eth.Contract(ABI, ADDRESS);\n              this.setState({\n                contract: contract\n              });\n              _context.next = 9;\n              return contract.methods.isUserExists(this.state.account).call();\n\n            case 9:\n              isExists = _context.sent;\n              this.setState({\n                isExist: isExists\n              });\n              _context.next = 13;\n              return contract.methods.registrationCost().call();\n\n            case 13:\n              costs = _context.sent;\n              this.setState({\n                cost: costs\n              });\n              this.setState({\n                isLoading: false\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _loadBlockchainData.apply(this, arguments);\n  }\n\n  function loadWeb3() {\n    return _loadWeb.apply(this, arguments);\n  }\n\n  function _loadWeb() {\n    _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _loadWeb.apply(this, arguments);\n  }\n\n  function register(_x) {\n    return _register.apply(this, arguments);\n  }\n\n  function _register() {\n    _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_refererAddress) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this.setState({\n                loading: true\n              });\n              _context3.next = 3;\n              return this.loadWeb3();\n\n            case 3:\n              _context3.next = 5;\n              return this.loadBlockchainData();\n\n            case 5:\n              if (!this.state.isExist) {\n                _context3.next = 10;\n                break;\n              }\n\n              Router.push(\"/dashboard\");\n              this.setState({\n                loading: false\n              });\n              _context3.next = 12;\n              break;\n\n            case 10:\n              _context3.next = 12;\n              return this.state.contract.methods.registrationExt(_refererAddress).send({\n                value: this.state.cost,\n                from: this.state.account\n              }).then(function (receipt) {\n                Router.push(\"/dashboard\");\n                this.setState({\n                  loading: false\n                });\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    return _register.apply(this, arguments);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"Your inviter is ID \", router.query.id));\n};\n\n_s(RefLink, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = RefLink;\nexport default RefLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"RefLink\");","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/pages/ref/[id].js"],"names":["useRouter","useContext","RefLink","router","id","query","console","log","loadBlockchainData","web3","Web3","givenProvider","eth","getAccounts","accounts","setState","account","contract","Contract","ABI","ADDRESS","methods","isUserExists","state","call","isExists","isExist","registrationCost","costs","cost","isLoading","loadWeb3","window","ethereum","enable","currentProvider","alert","register","_refererAddress","loading","Router","push","registrationExt","send","value","from","then","receipt"],"mappings":"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","sourcesContent":["// import { useRouter } from \"next/router\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useContext } from \"react\";\r\n\r\nconst RefLink = () => {\r\n  const router = useRouter();\r\n  const id = router.query.id;\r\n  console.log(id);\r\n  // idToAddress\r\n  // pass Address into Context\r\n  async function loadBlockchainData() {\r\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n\r\n    const contract = new web3.eth.Contract(ABI, ADDRESS);\r\n    this.setState({ contract });\r\n    const isExists = await contract.methods\r\n      .isUserExists(this.state.account)\r\n      .call();\r\n    this.setState({ isExist: isExists });\r\n    const costs = await contract.methods.registrationCost().call();\r\n    this.setState({ cost: costs });\r\n    this.setState({ isLoading: false });\r\n  }\r\n\r\n  async function loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async function register(_refererAddress) {\r\n    this.setState({ loading: true });\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n    if (this.state.isExist) {\r\n      Router.push(\"/dashboard\");\r\n      this.setState({ loading: false });\r\n    } else {\r\n      await this.state.contract.methods\r\n        .registrationExt(_refererAddress)\r\n        .send({\r\n          value: this.state.cost,\r\n          from: this.state.account,\r\n        })\r\n        .then(function (receipt) {\r\n          Router.push(\"/dashboard\");\r\n          this.setState({ loading: false });\r\n        });\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <p>Your inviter is ID {router.query.id}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RefLink;\r\n"]},"metadata":{},"sourceType":"module"}