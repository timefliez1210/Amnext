{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\n// Fetching WEB3 Provider\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 6;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 4;\n            return window.ethereum.enable();\n\n          case 4:\n            _context.next = 7;\n            break;\n\n          case 6:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}(); // Async setState\n\nexport var useStateWithPromise = function useStateWithPromise(initialState) {\n  _s();\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var resolverRef = useRef(null);\n  useEffect(function () {\n    if (resolverRef.current) {\n      resolverRef.current(state);\n      resolverRef.current = null;\n    }\n    /**\r\n     * Since a state update could be triggered with the exact same state again,\r\n     * it's not enough to specify state as the only dependency of this useEffect.\r\n     * That's why resolverRef.current is also a dependency, because it will guarantee,\r\n     * that handleSetState was called in previous render\r\n     */\n\n  }, [resolverRef.current, state]);\n  var handleSetState = useCallback(function (stateAction) {\n    setState(stateAction);\n    return new Promise(function (resolve) {\n      resolverRef.current = resolve;\n    });\n  }, [setState]);\n  return [state, handleSetState];\n};\n\n_s(useStateWithPromise, \"EUMSdK+jLdICJIaWW9bEXx6tPAg=\");","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/utils/utility.js"],"names":["loadWeb3","window","ethereum","web3","Web3","enable","currentProvider","alert","useStateWithPromise","initialState","useState","state","setState","resolverRef","useRef","useEffect","current","handleSetState","useCallback","stateAction","Promise","resolve"],"mappings":";;;;;;AAAA;AAEA,OAAO,IAAMA,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,iBAClBC,MAAM,CAACC,QADW;AAAA;AAAA;AAAA;;AAEpBD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACC,QAAhB,CAAd;AAFoB;AAAA,mBAGdD,MAAM,CAACC,QAAP,CAAgBG,MAAhB,EAHc;;AAAA;AAAA;AAAA;;AAAA;AAIf,gBAAIJ,MAAM,CAACE,IAAX,EAAiB;AACtBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACE,IAAP,CAAYG,eAArB,CAAd;AACD,aAFM,MAEA;AACLL,cAAAA,MAAM,CAACM,KAAP,CACE,qEADF;AAGD;;AAVqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARP,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAaP;;AAEA,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD,EAAkB;AAAA;;AAAA,kBACzBC,QAAQ,CAACD,YAAD,CADiB;AAAA;AAAA,MAC5CE,KAD4C;AAAA,MACrCC,QADqC;;AAEnD,MAAMC,WAAW,GAAGC,MAAM,CAAC,IAAD,CAA1B;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIF,WAAW,CAACG,OAAhB,EAAyB;AACvBH,MAAAA,WAAW,CAACG,OAAZ,CAAoBL,KAApB;AACAE,MAAAA,WAAW,CAACG,OAAZ,GAAsB,IAAtB;AACD;AACD;;;;;;;AAMD,GAXQ,EAWN,CAACH,WAAW,CAACG,OAAb,EAAsBL,KAAtB,CAXM,CAAT;AAaA,MAAMM,cAAc,GAAGC,WAAW,CAChC,UAACC,WAAD,EAAiB;AACfP,IAAAA,QAAQ,CAACO,WAAD,CAAR;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BR,MAAAA,WAAW,CAACG,OAAZ,GAAsBK,OAAtB;AACD,KAFM,CAAP;AAGD,GAN+B,EAOhC,CAACT,QAAD,CAPgC,CAAlC;AAUA,SAAO,CAACD,KAAD,EAAQM,cAAR,CAAP;AACD,CA5BM;;GAAMT,mB","sourcesContent":["// Fetching WEB3 Provider\r\n\r\nexport const loadWeb3 = async () => {\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n    await window.ethereum.enable();\r\n  } else if (window.web3) {\r\n    window.web3 = new Web3(window.web3.currentProvider);\r\n  } else {\r\n    window.alert(\r\n      \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n    );\r\n  }\r\n};\r\n\r\n// Async setState\r\n\r\nexport const useStateWithPromise = (initialState) => {\r\n  const [state, setState] = useState(initialState);\r\n  const resolverRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (resolverRef.current) {\r\n      resolverRef.current(state);\r\n      resolverRef.current = null;\r\n    }\r\n    /**\r\n     * Since a state update could be triggered with the exact same state again,\r\n     * it's not enough to specify state as the only dependency of this useEffect.\r\n     * That's why resolverRef.current is also a dependency, because it will guarantee,\r\n     * that handleSetState was called in previous render\r\n     */\r\n  }, [resolverRef.current, state]);\r\n\r\n  const handleSetState = useCallback(\r\n    (stateAction) => {\r\n      setState(stateAction);\r\n      return new Promise((resolve) => {\r\n        resolverRef.current = resolve;\r\n      });\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return [state, handleSetState];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}