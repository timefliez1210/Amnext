{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crfab\\\\Desktop\\\\forsage-boilerplate\\\\pages\\\\ref\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import { useRouter } from \"next/router\";\nimport { useRouter } from \"next/router\";\nimport { useContext } from \"react\";\n\nconst RefLink = () => {\n  const router = useRouter();\n  const id = router.query.id;\n  console.log(id); // idToAddress\n  // pass Address into Context\n\n  async function loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const contract = new web3.eth.Contract(ABI, ADDRESS);\n    this.setState({\n      contract\n    });\n    const isExists = await contract.methods.isUserExists(this.state.account).call();\n    this.setState({\n      isExist: isExists\n    });\n    const costs = await contract.methods.registrationCost().call();\n    this.setState({\n      cost: costs\n    });\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  async function loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Your inviter is ID \", router.query.id));\n};\n\nexport default RefLink;","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/pages/ref/[id].js"],"names":["useRouter","useContext","RefLink","router","id","query","console","log","loadBlockchainData","web3","Web3","givenProvider","accounts","eth","getAccounts","setState","account","contract","Contract","ABI","ADDRESS","isExists","methods","isUserExists","state","call","isExist","costs","registrationCost","cost","isLoading","loadWeb3","window","ethereum","enable","currentProvider","alert"],"mappings":";;;AAAA;AACA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAMI,EAAE,GAAGD,MAAM,CAACE,KAAP,CAAaD,EAAxB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ,EAHoB,CAIpB;AACA;;AACA,iBAAeI,kBAAf,GAAoC;AAClC,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,aAAL,IAAsB,uBAA/B,CAAb;AACA,UAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB;AACA,SAAKC,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAEJ,QAAQ,CAAC,CAAD;AAAnB,KAAd;AAEA,UAAMK,QAAQ,GAAG,IAAIR,IAAI,CAACI,GAAL,CAASK,QAAb,CAAsBC,GAAtB,EAA2BC,OAA3B,CAAjB;AACA,SAAKL,QAAL,CAAc;AAAEE,MAAAA;AAAF,KAAd;AACA,UAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CACpBC,YADoB,CACP,KAAKC,KAAL,CAAWR,OADJ,EAEpBS,IAFoB,EAAvB;AAGA,SAAKV,QAAL,CAAc;AAAEW,MAAAA,OAAO,EAAEL;AAAX,KAAd;AACA,UAAMM,KAAK,GAAG,MAAMV,QAAQ,CAACK,OAAT,CAAiBM,gBAAjB,GAAoCH,IAApC,EAApB;AACA,SAAKV,QAAL,CAAc;AAAEc,MAAAA,IAAI,EAAEF;AAAR,KAAd;AACA,SAAKZ,QAAL,CAAc;AAAEe,MAAAA,SAAS,EAAE;AAAb,KAAd;AACD;;AAED,iBAAeC,QAAf,GAA0B;AACxB,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBD,MAAAA,MAAM,CAACvB,IAAP,GAAc,IAAIC,IAAJ,CAASsB,MAAM,CAACC,QAAhB,CAAd;AACA,YAAMD,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAN;AACD,KAHD,MAGO,IAAIF,MAAM,CAACvB,IAAX,EAAiB;AACtBuB,MAAAA,MAAM,CAACvB,IAAP,GAAc,IAAIC,IAAJ,CAASsB,MAAM,CAACvB,IAAP,CAAY0B,eAArB,CAAd;AACD,KAFM,MAEA;AACLH,MAAAA,MAAM,CAACI,KAAP,CACE,qEADF;AAGD;AACF;;AACD,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAuBjC,MAAM,CAACE,KAAP,CAAaD,EAApC,CADF,CADF;AAKD,CAvCD;;AAyCA,eAAeF,OAAf","sourcesContent":["// import { useRouter } from \"next/router\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useContext } from \"react\";\r\n\r\nconst RefLink = () => {\r\n  const router = useRouter();\r\n  const id = router.query.id;\r\n  console.log(id);\r\n  // idToAddress\r\n  // pass Address into Context\r\n  async function loadBlockchainData() {\r\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n    const accounts = await web3.eth.getAccounts();\r\n    this.setState({ account: accounts[0] });\r\n\r\n    const contract = new web3.eth.Contract(ABI, ADDRESS);\r\n    this.setState({ contract });\r\n    const isExists = await contract.methods\r\n      .isUserExists(this.state.account)\r\n      .call();\r\n    this.setState({ isExist: isExists });\r\n    const costs = await contract.methods.registrationCost().call();\r\n    this.setState({ cost: costs });\r\n    this.setState({ isLoading: false });\r\n  }\r\n\r\n  async function loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <p>Your inviter is ID {router.query.id}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RefLink;\r\n"]},"metadata":{},"sourceType":"module"}