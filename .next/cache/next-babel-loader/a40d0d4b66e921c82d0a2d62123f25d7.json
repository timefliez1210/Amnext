{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this;\n\nimport { ABI, ADDRESS } from \"./globals\"; // Fetching WEB3 Provider\n\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!window.ethereum) {\n              _context.next = 7;\n              break;\n            }\n\n            window.web3 = new Web3(window.ethereum);\n            _context.next = 5;\n            return window.ethereum.enable();\n\n          case 5:\n            _context.next = 8;\n            break;\n\n          case 7:\n            if (window.web3) {\n              window.web3 = new Web3(window.web3.currentProvider);\n            } else {\n              window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n            }\n\n          case 8:\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            window.alert(\"Trouble connecting to you web3 browser...\");\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n\n  return function loadWeb3() {\n    return _ref.apply(this, arguments);\n  };\n}(); // General loading from the blockchain and instantiating the contract\n\nexport var loadBlockchainData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var web3, contract, isExists;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\n            _this.setState({\n              account: _this.context.account\n            });\n\n            contract = new web3.eth.Contract(ABI, ADDRESS);\n\n            _this.setState({\n              contract: contract\n            });\n\n            _context2.next = 6;\n            return contract.methods.isUserExists(_this.state.account).call();\n\n          case 6:\n            isExists = _context2.sent;\n\n            _this.setState({\n              isExist: isExists\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadBlockchainData() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/crfab/Desktop/forsage-boilerplate/utils/utility.js"],"names":["ABI","ADDRESS","loadWeb3","window","ethereum","web3","Web3","enable","currentProvider","alert","loadBlockchainData","givenProvider","setState","account","context","contract","eth","Contract","methods","isUserExists","state","call","isExists","isExist"],"mappings":";;;;;AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,WAA7B,C,CAEA;;AAEA,OAAO,IAAMC,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEhBC,MAAM,CAACC,QAFS;AAAA;AAAA;AAAA;;AAGlBD,YAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACC,QAAhB,CAAd;AAHkB;AAAA,mBAIZD,MAAM,CAACC,QAAP,CAAgBG,MAAhB,EAJY;;AAAA;AAAA;AAAA;;AAAA;AAKb,gBAAIJ,MAAM,CAACE,IAAX,EAAiB;AACtBF,cAAAA,MAAM,CAACE,IAAP,GAAc,IAAIC,IAAJ,CAASH,MAAM,CAACE,IAAP,CAAYG,eAArB,CAAd;AACD,aAFM,MAEA;AACLL,cAAAA,MAAM,CAACM,KAAP,CACE,qEADF;AAGD;;AAXmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAapBN,YAAAA,MAAM,CAACM,KAAP,CAAa,2CAAb;;AAboB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARP,QAAQ;AAAA;AAAA;AAAA,GAAd,C,CAiBP;;AAEA,OAAO,IAAMQ,kBAAkB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BL,YAAAA,IAD0B,GACnB,IAAIC,IAAJ,CAASA,IAAI,CAACK,aAAL,IAAsB,uBAA/B,CADmB;;AAEhC,YAAA,KAAI,CAACC,QAAL,CAAc;AAAEC,cAAAA,OAAO,EAAE,KAAI,CAACC,OAAL,CAAaD;AAAxB,aAAd;;AACME,YAAAA,QAH0B,GAGf,IAAIV,IAAI,CAACW,GAAL,CAASC,QAAb,CAAsBjB,GAAtB,EAA2BC,OAA3B,CAHe;;AAIhC,YAAA,KAAI,CAACW,QAAL,CAAc;AAAEG,cAAAA,QAAQ,EAARA;AAAF,aAAd;;AAJgC;AAAA,mBAKTA,QAAQ,CAACG,OAAT,CACpBC,YADoB,CACP,KAAI,CAACC,KAAL,CAAWP,OADJ,EAEpBQ,IAFoB,EALS;;AAAA;AAK1BC,YAAAA,QAL0B;;AAQhC,YAAA,KAAI,CAACV,QAAL,CAAc;AAAEW,cAAAA,OAAO,EAAED;AAAX,aAAd;;AARgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBZ,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import { ABI, ADDRESS } from \"./globals\";\r\n\r\n// Fetching WEB3 Provider\r\n\r\nexport const loadWeb3 = async () => {\r\n  try {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  } catch (err) {\r\n    window.alert(\"Trouble connecting to you web3 browser...\");\r\n  }\r\n};\r\n\r\n// General loading from the blockchain and instantiating the contract\r\n\r\nexport const loadBlockchainData = async () => {\r\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\r\n  this.setState({ account: this.context.account });\r\n  const contract = new web3.eth.Contract(ABI, ADDRESS);\r\n  this.setState({ contract });\r\n  const isExists = await contract.methods\r\n    .isUserExists(this.state.account)\r\n    .call();\r\n  this.setState({ isExist: isExists });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}